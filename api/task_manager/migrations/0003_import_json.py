# Generated by Django 2.0.2 on 2018-02-03 23:23
import json
import logging
import os
from datetime import datetime

from django.db import migrations
from django.utils import timezone
from task_manager.models import Task as TaskModel

JSON_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), '0003_import_json.json')
logger = logging.getLogger(__name__)


def _get_model_classes(apps):
    """
    Retrieve the model classes at this migration's point in time.
    We cannot import the models directly because they may be newer versions than this migration expects.
    :param apps:
    :return: tuple
    """
    return (
        apps.get_model('task_manager', 'Address'),
        apps.get_model('task_manager', 'User'),
        apps.get_model('task_manager', 'Task'),
        apps.get_model('task_manager', 'TaskNote'),
    )


def import_json(apps, schema_editor):
    """
    Loads and parses data from JSON file and saves it.
    :param apps:
    :param schema_editor:
    :return:
    """
    Address, User, Task, TaskNote = _get_model_classes(apps)

    with open(JSON_PATH) as json_file:
        data = json.load(json_file)

        for person in data['people']:
            address = Address(
                street=person['address']['street'],
                city=person['address']['city'],
                state=person['address']['state'],
                postal_code=person['address']['zip'],
            )
            address.save()
            User(
                id=person['id'],
                username=person['user_name'],
                first_name=person['first_name'],
                last_name=person['last_name'],
                email=person['email'],
                address=address,
            ).save()

        # Invert the priority map for quicker lookups.
        priorities_inverted = {name: level for level, name in TaskModel.PRIORITIES.items()}

        for task in data['tasks']:
            # Make the datetime object timezone aware to prevent warnings from Django.
            created_at = datetime.strptime(task['date_created'], '%m/%d/%Y').astimezone(timezone.get_current_timezone())

            Task(
                id=task['id'],
                title=task['title'],
                details=task['details'],
                is_completed=task['completed'],
                priority=priorities_inverted[task['priority']],  # JSON has priority name, not level.
                created_at=created_at,
            ).save()

        for assignment in data['task_assignments']:
            task = Task.objects.get(id=assignment['task_id'])
            task.assignee_user_id = assignment['person_id']
            task.is_accepted = assignment['accepted']
            task.save()

        for note in data['task_notes']:
            if note['task_id'] == 0 or note['person_id'] == 0:
                logger.warning("Skipped importing task note because of an ID of 0. Note: " + json.dumps(note))
                continue

            TaskNote(
                task_id=note['task_id'],
                user_id=note['person_id'],
                note=note['notes'],
            ).save()


def delete_imported_json(apps, schema_editor):
    """
    Deletes all data saved from the import.
    :param apps:
    :param schema_editor:
    :return:
    """
    Address, User, Task, TaskNote = _get_model_classes(apps)

    TaskNote.objects.all().delete()
    Address.objects.all().delete()
    User.objects.all().delete()
    Task.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ('task_manager', '0002_auto_20180204_0002'),
    ]

    operations = [
        migrations.RunPython(import_json, delete_imported_json),
    ]
